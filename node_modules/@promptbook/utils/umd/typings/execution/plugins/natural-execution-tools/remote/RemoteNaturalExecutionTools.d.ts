import { Prompt } from '../../../../types/Prompt';
import { NaturalExecutionTools } from '../../../NaturalExecutionTools';
import { PromptChatResult, PromptCompletionResult } from '../../../PromptResult';
import { RemoteNaturalExecutionToolsOptions } from './RemoteNaturalExecutionToolsOptions';
/**
 * Remote server is a proxy server that uses its execution tools internally and exposes the executor interface externally.
 *
 * You can simply use `RemoteExecutionTools` on client-side javascript and connect to your remote server.
 * This is useful to make all logic on browser side but not expose your API keys or no need to use customer's GPU.
 *
 * @see https://github.com/webgptorg/promptbook#remote-server
 */
export declare class RemoteNaturalExecutionTools implements NaturalExecutionTools {
    private readonly options;
    constructor(options: RemoteNaturalExecutionToolsOptions);
    /**
     * Creates a connection to the remote proxy server.
     */
    private makeConnection;
    /**
     * Calls remote proxy server to use a chat model.
     */
    gptChat(prompt: Prompt): Promise<PromptChatResult>;
    /**
     * Calls remote proxy server to use a completion model.
     */
    gptComplete(prompt: Prompt): Promise<PromptCompletionResult>;
    /**
     * Calls remote proxy server to use both completion or chat model.
     */
    private gptCommon;
}
/**
 * TODO: [ü§π‚Äç‚ôÇÔ∏è] RemoteNaturalExecutionTools should extend Destroyable and implement IDestroyable
 */
