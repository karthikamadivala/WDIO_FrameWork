import type { SuiteStats, TestStats, RunnerStats, HookStats } from '@wdio/reporter';
import WDIOReporter from '@wdio/reporter';
import type { CurrentRunInfo, StdLog } from './types.js';
import type { TestData, TestMeta } from './types.js';
declare class _TestReporter extends WDIOReporter {
    private _capabilities;
    private _config?;
    private _observability;
    private _sessionId?;
    private _suiteName?;
    private _suites;
    private static _tests;
    private _gitConfigPath?;
    private _gitConfigured;
    private _currentHook;
    private _currentTest;
    private _userCaps?;
    private listener;
    onRunnerStart(runnerStats: RunnerStats): Promise<void>;
    private getUserCaps;
    registerListeners(): void;
    appendTestItemLog(stdLog: StdLog): Promise<void>;
    setCurrentHook(hookDetails: CurrentRunInfo): void;
    configureGit(): Promise<void>;
    static getTests(): Record<string, TestMeta>;
    onSuiteStart(suiteStats: SuiteStats): void;
    onSuiteEnd(): void;
    needToSendData(testType?: string, event?: string): boolean;
    onTestEnd(testStats: TestStats): Promise<void>;
    onTestStart(testStats: TestStats): Promise<void>;
    onHookStart(hookStats: HookStats): Promise<void>;
    onHookEnd(hookStats: HookStats): Promise<void>;
    getHookIdentifier(hookStats: HookStats): string;
    onTestSkip(testStats: TestStats): Promise<void>;
    getRunData(testStats: TestStats | HookStats, eventType: string): Promise<TestData>;
}
declare const TestReporter: typeof _TestReporter;
type TestReporter = _TestReporter;
export default TestReporter;
//# sourceMappingURL=reporter.d.ts.map